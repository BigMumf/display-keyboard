#pragma once

#if defined(LV_LVGL_H_INCLUDE_SIMPLE)
#include "lvgl.h"
#else
#include "lvgl/lvgl.h"
#endif


#ifndef LV_ATTRIBUTE_MEM_ALIGN
#define LV_ATTRIBUTE_MEM_ALIGN
#endif

#ifndef LV_ATTRIBUTE_IMG_THUMBS_UP
#define LV_ATTRIBUTE_IMG_THUMBS_UP
#endif

constexpr LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_THUMBS_UP uint8_t rating_positive_map[] = {
  0x00, 0x01, 0x00, 0xff, 	/*Color of index 0*/
  0x06, 0x20, 0x02, 0xff, 	/*Color of index 1*/
  0x0e, 0x2a, 0x00, 0xff, 	/*Color of index 2*/
  0x0c, 0x2f, 0x04, 0xff, 	/*Color of index 3*/

  0x00, 0x01, 0xfa, 0x2e, 0x00, 0x00, 0x0b, 0x8a, 0xf4, 0x00, 0x00,
  0x00, 0x2a, 0xaa, 0xa9, 0x00, 0x00, 0x06, 0xaa, 0xaa, 0x80, 0x00,
  0x02, 0xea, 0xaa, 0xaa, 0xb0, 0x00, 0xea, 0xaa, 0xaa, 0xb8, 0x00,
  0x0b, 0xaa, 0xaa, 0xaa, 0xa4, 0x01, 0xaa, 0xaa, 0xaa, 0xae, 0x00,
  0x0e, 0xaa, 0xaa, 0xaa, 0xa8, 0xa2, 0xaa, 0xaa, 0xaa, 0xab, 0x00,
  0x2a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x80,
  0x2a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x80,
  0x6a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x90,
  0xea, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xb0,
  0xea, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xb0,
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa0,
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa0,
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa0,
  0x2a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x80,
  0xea, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xb0,
  0x6a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x90,
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa0,
  0x7a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xd0,
  0x1a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x40,
  0x0e, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xab, 0x00,
  0x06, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa9, 0x00,
  0x07, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xad, 0x00,
  0x00, 0x6a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x90, 0x00,
  0x00, 0x7a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xd0, 0x00,
  0x00, 0x2e, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xab, 0x80, 0x00,
  0x00, 0x09, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa6, 0x00, 0x00,
  0x00, 0x00, 0x6a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x90, 0x00, 0x00,
  0x00, 0x00, 0x3a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x3e, 0xaa, 0xaa, 0xaa, 0xaa, 0xab, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x02, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x2a, 0xaa, 0xaa, 0xaa, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x2e, 0xaa, 0xaa, 0xab, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0xaa, 0xaa, 0xa5, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x6a, 0xaa, 0x90, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xba, 0xaa, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3e, 0xab, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00,
};

constexpr lv_img_dsc_t rating_positive = {
    .header =
        {
            .cf = LV_IMG_CF_INDEXED_2BIT,
            .always_zero = 0,
            .reserved = 0,
            .w = 42,
            .h = 38,
        },
    .data_size = 434,
    .data = rating_positive_map,
};
