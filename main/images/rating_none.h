#pragma once

#if defined(LV_LVGL_H_INCLUDE_SIMPLE)
#include "lvgl.h"
#else
#include "lvgl/lvgl.h"
#endif


#ifndef LV_ATTRIBUTE_MEM_ALIGN
#define LV_ATTRIBUTE_MEM_ALIGN
#endif

#ifndef LV_ATTRIBUTE_IMG_THUMBS_NOTUP
#define LV_ATTRIBUTE_IMG_THUMBS_NOTUP
#endif

constexpr LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_THUMBS_NOTUP uint8_t rating_none_map[] = {
  0x00, 0x01, 0x00, 0xff, 	/*Color of index 0*/
  0x17, 0x19, 0x17, 0xff, 	/*Color of index 1*/
  0x1c, 0x1e, 0x1c, 0xff, 	/*Color of index 2*/
  0x34, 0x37, 0x35, 0xff, 	/*Color of index 3*/

  0x00, 0x01, 0x2f, 0x72, 0x00, 0x00, 0x08, 0xdf, 0x84, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xfd, 0x40, 0x00, 0x17, 0xff, 0xff, 0xf0, 0x00,
  0x02, 0xbf, 0xff, 0xff, 0xcc, 0x03, 0x3f, 0xff, 0xff, 0xe8, 0x00,
  0x0a, 0xff, 0xff, 0xff, 0xf7, 0x0d, 0xff, 0xff, 0xff, 0xfa, 0x00,
  0x3b, 0xff, 0xff, 0xff, 0xfd, 0xa7, 0xff, 0xff, 0xff, 0xfe, 0xc0,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
  0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x90,
  0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
  0x3b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xc0,
  0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x00,
  0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x00,
  0x03, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdc, 0x00,
  0x00, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x90, 0x00,
  0x00, 0x2b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x80, 0x00,
  0x00, 0x09, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x00, 0x00,
  0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x00, 0x00,
  0x00, 0x00, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x02, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3b, 0xff, 0xff, 0xfe, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0xff, 0xff, 0xf5, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x7f, 0xff, 0xdc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x4f, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00,
};

constexpr lv_img_dsc_t rating_none = {
    .header =
        {
            .cf = LV_IMG_CF_INDEXED_2BIT,
            .always_zero = 0,
            .reserved = 0,
            .w = 42,
            .h = 38,
        },
    .data_size = 434,
    .data = rating_none_map,
};
